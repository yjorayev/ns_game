1. click on figure
2. get moves for figure
3. pick move
4. execute move
5. execute moveEffects: special figures, regular disappearance
6. go to 1


1. visit cell
2. update board state on visit
  a. no changes if not visitable
  b. stay on cell if cell is empty
  c. set new location if should jump



1. Record the list of taken steps(fromCell, currentDirection, canChangeDirection)
  a. Add code to handle dynamicBarriers
2.





Explanation of getPath(from, to) algorithm:
  1. Start exploring the closest possible destinations(to). From current location move one cell in each direction and the locations to the queue of possible destinations.
  2. Do not update the board state until the specific step is taken. This is because we don't change board state as we are walking the path.
     We only update the board state after we complete the path.
  3. Keep list of taken steps to prevent analyzing the same path.
     From location, currentDirection and casnChangeDirection are enough because boardState should stay the same as we look for possible paths.
  4. Pop an item from the queue and go to step 1 using that location as from.
          (This will still be the possible move because if we can move from A to B and from B to C(considering canChangeDirection flag) then we can move from A to C).
  5.



land should return null if cannot land and LandResult otherwise
when landing on figure, if exitLocation is not equal to landLocation should call land on exit location.
